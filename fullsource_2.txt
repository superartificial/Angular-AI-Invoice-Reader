

---START OF FILE: frontend\dist\frontend\3rdpartylicenses.txt---


--------------------------------------------------------------------------------
Package: @angular/core
License: "MIT"


--------------------------------------------------------------------------------
Package: rxjs
License: "Apache-2.0"

                               Apache License
                         Version 2.0, January 2004
                      http://www.apache.org/licenses/

 TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

 1. Definitions.

    "License" shall mean the terms and conditions for use, reproduction,
    and distribution as defined by Sections 1 through 9 of this document.

    "Licensor" shall mean the copyright owner or entity authorized by
    the copyright owner that is granting the License.

    "Legal Entity" shall mean the union of the acting entity and all
    other entities that control, are controlled by, or are under common
    control with that entity. For the purposes of this definition,
    "control" means (i) the power, direct or indirect, to cause the
    direction or management of such entity, whether by contract or
    otherwise, or (ii) ownership of fifty percent (50%) or more of the
    outstanding shares, or (iii) beneficial ownership of such entity.

    "You" (or "Your") shall mean an individual or Legal Entity
    exercising permissions granted by this License.

    "Source" form shall mean the preferred form for making modifications,
    including but not limited to software source code, documentation
    source, and configuration files.

    "Object" form shall mean any form resulting from mechanical
    transformation or translation of a Source form, including but
    not limited to compiled object code, generated documentation,
    and conversions to other media types.

    "Work" shall mean the work of authorship, whether in Source or
    Object form, made available under the License, as indicated by a
    copyright notice that is included in or attached to the work
    (an example is provided in the Appendix below).

    "Derivative Works" shall mean any work, whether in Source or Object
    form, that is based on (or derived from) the Work and for which the
    editorial revisions, annotations, elaborations, or other modifications
    represent, as a whole, an original work of authorship. For the purposes
    of this License, Derivative Works shall not include works that remain
    separable from, or merely link (or bind by name) to the interfaces of,
    the Work and Derivative Works thereof.

    "Contribution" shall mean any work of authorship, including
    the original version of the Work and any modifications or additions
    to that Work or Derivative Works thereof, that is intentionally
    submitted to Licensor for inclusion in the Work by the copyright owner
    or by an individual or Legal Entity authorized to submit on behalf of
    the copyright owner. For the purposes of this definition, "submitted"
    means any form of electronic, verbal, or written communication sent
    to the Licensor or its representatives, including but not limited to
    communication on electronic mailing lists, source code control systems,
    and issue tracking systems that are managed by, or on behalf of, the
    Licensor for the purpose of discussing and improving the Work, but
    excluding communication that is conspicuously marked or otherwise
    designated in writing by the copyright owner as "Not a Contribution."

    "Contributor" shall mean Licensor and any individual or Legal Entity
    on behalf of whom a Contribution has been received by Licensor and
    subsequently incorporated within the Work.

 2. Grant of Copyright License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    copyright license to reproduce, prepare Derivative Works of,
    publicly display, publicly perform, sublicense, and distribute the
    Work and such Derivative Works in Source or Object form.

 3. Grant of Patent License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    (except as stated in this section) patent license to make, have made,
    use, offer to sell, sell, import, and otherwise transfer the Work,
    where such license applies only to those patent claims licensable
    by such Contributor that are necessarily infringed by their
    Contribution(s) alone or by combination of their Contribution(s)
    with the Work to which such Contribution(s) was submitted. If You
    institute patent litigation against any entity (including a
    cross-claim or counterclaim in a lawsuit) alleging that the Work
    or a Contribution incorporated within the Work constitutes direct
    or contributory patent infringement, then any patent licenses
    granted to You under this License for that Work shall terminate
    as of the date such litigation is filed.

 4. Redistribution. You may reproduce and distribute copies of the
    Work or Derivative Works thereof in any medium, with or without
    modifications, and in Source or Object form, provided that You
    meet the following conditions:

    (a) You must give any other recipients of the Work or
        Derivative Works a copy of this License; and

    (b) You must cause any modified files to carry prominent notices
        stating that You changed the files; and

    (c) You must retain, in the Source form of any Derivative Works
        that You distribute, all copyright, patent, trademark, and
        attribution notices from the Source form of the Work,
        excluding those notices that do not pertain to any part of
        the Derivative Works; and

    (d) If the Work includes a "NOTICE" text file as part of its
        distribution, then any Derivative Works that You distribute must
        include a readable copy of the attribution notices contained
        within such NOTICE file, excluding those notices that do not
        pertain to any part of the Derivative Works, in at least one
        of the following places: within a NOTICE text file distributed
        as part of the Derivative Works; within the Source form or
        documentation, if provided along with the Derivative Works; or,
        within a display generated by the Derivative Works, if and
        wherever such third-party notices normally appear. The contents
        of the NOTICE file are for informational purposes only and
        do not modify the License. You may add Your own attribution
        notices within Derivative Works that You distribute, alongside
        or as an addendum to the NOTICE text from the Work, provided
        that such additional attribution notices cannot be construed
        as modifying the License.

    You may add Your own copyright statement to Your modifications and
    may provide additional or different license terms and conditions
    for use, reproduction, or distribution of Your modifications, or
    for any such Derivative Works as a whole, provided Your use,
    reproduction, and distribution of the Work otherwise complies with
    the conditions stated in this License.

 5. Submission of Contributions. Unless You explicitly state otherwise,
    any Contribution intentionally submitted for inclusion in the Work
    by You to the Licensor shall be under the terms and conditions of
    this License, without any additional terms or conditions.
    Notwithstanding the above, nothing herein shall supersede or modify
    the terms of any separate license agreement you may have executed
    with Licensor regarding such Contributions.

 6. Trademarks. This License does not grant permission to use the trade
    names, trademarks, service marks, or product names of the Licensor,
    except as required for reasonable and customary use in describing the
    origin of the Work and reproducing the content of the NOTICE file.

 7. Disclaimer of Warranty. Unless required by applicable law or
    agreed to in writing, Licensor provides the Work (and each
    Contributor provides its Contributions) on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied, including, without limitation, any warranties or conditions
    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
    PARTICULAR PURPOSE. You are solely responsible for determining the
    appropriateness of using or redistributing the Work and assume any
    risks associated with Your exercise of permissions under this License.

 8. Limitation of Liability. In no event and under no legal theory,
    whether in tort (including negligence), contract, or otherwise,
    unless required by applicable law (such as deliberate and grossly
    negligent acts) or agreed to in writing, shall any Contributor be
    liable to You for damages, including any direct, indirect, special,
    incidental, or consequential damages of any character arising as a
    result of this License or out of the use or inability to use the
    Work (including but not limited to damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all
    other commercial damages or losses), even if such Contributor
    has been advised of the possibility of such damages.

 9. Accepting Warranty or Additional Liability. While redistributing
    the Work or Derivative Works thereof, You may choose to offer,
    and charge a fee for, acceptance of support, warranty, indemnity,
    or other liability obligations and/or rights consistent with this
    License. However, in accepting such obligations, You may act only
    on Your own behalf and on Your sole responsibility, not on behalf
    of any other Contributor, and only if You agree to indemnify,
    defend, and hold each Contributor harmless for any liability
    incurred by, or claims asserted against, such Contributor by reason
    of your accepting any such warranty or additional liability.

 END OF TERMS AND CONDITIONS

 APPENDIX: How to apply the Apache License to your work.

    To apply the Apache License to your work, attach the following
    boilerplate notice, with the fields enclosed by brackets "[]"
    replaced with your own identifying information. (Don't include
    the brackets!)  The text should be enclosed in the appropriate
    comment syntax for the file format. We also recommend that a
    file or class name and description of purpose be included on the
    same "printed page" as the copyright notice for easier
    identification within third-party archives.

 Copyright (c) 2015-2018 Google, Inc., Netflix, Inc., Microsoft Corp. and contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 

--------------------------------------------------------------------------------
Package: tslib
License: "0BSD"

Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
--------------------------------------------------------------------------------
Package: @angular/common
License: "MIT"


--------------------------------------------------------------------------------
Package: @angular/platform-browser
License: "MIT"


--------------------------------------------------------------------------------
Package: @angular/router
License: "MIT"


--------------------------------------------------------------------------------
Package: @angular/forms
License: "MIT"


--------------------------------------------------------------------------------
Package: ngx-pagination
License: "MIT"


--------------------------------------------------------------------------------
Package: zone.js
License: "MIT"

The MIT License

Copyright (c) 2010-2023 Google LLC. https://angular.io/license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------------


---END OF FILE: frontend\dist\frontend\3rdpartylicenses.txt---



---START OF FILE: frontend\src\index.html---

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Frontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>


---END OF FILE: frontend\src\index.html---



---START OF FILE: frontend\src\main.ts---

import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

---END OF FILE: frontend\src\main.ts---



---START OF FILE: frontend\src\styles.css---

#test {
    background-color: #f0f0f3;
}

---END OF FILE: frontend\src\styles.css---



---START OF FILE: frontend\src\styles.scss---

/* You can add global styles to this file, and also import other style files */

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

---END OF FILE: frontend\src\styles.scss---



---START OF FILE: frontend\src\app\app.component.html---

<div class="flex flex-col min-h-screen">
  <app-header></app-header>
  <main class="flex-grow container mx-auto my-8">
    <router-outlet></router-outlet>
  </main>
  <app-footer></app-footer>
</div>

---END OF FILE: frontend\src\app\app.component.html---



---START OF FILE: frontend\src\app\app.component.scss---



---END OF FILE: frontend\src\app\app.component.scss---



---START OF FILE: frontend\src\app\app.component.spec.ts---

import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'frontend' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('frontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, frontend');
  });
});


---END OF FILE: frontend\src\app\app.component.spec.ts---



---START OF FILE: frontend\src\app\app.component.ts---

import { Component } from '@angular/core';
import { InvoicesComponent } from './invoices/invoices.component';
import { HeaderComponent } from './header/header.component';
import { FooterComponent } from './footer/footer.component';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
  standalone: true,
  imports: [InvoicesComponent,HeaderComponent,FooterComponent,RouterOutlet]
})
export class AppComponent {
  title = 'Invoice Management System';
}

---END OF FILE: frontend\src\app\app.component.ts---



---START OF FILE: frontend\src\app\app.config.ts---

import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';

export const appConfig: ApplicationConfig = {
  providers: [provideRouter(routes),provideHttpClient()]
};


---END OF FILE: frontend\src\app\app.config.ts---



---START OF FILE: frontend\src\app\app.routes.ts---

import { Routes } from '@angular/router';
import { InvoiceListComponent } from './invoice-list/invoice-list.component';
import { NewInvoiceFormComponent } from './new-invoice-form/new-invoice-form.component';
import { UploadInvoiceComponent } from './upload-invoice/upload-invoice.component';
import { InvoicesComponent } from './invoices/invoices.component';
import { ContactListComponent } from './contact-list/contact-list.component';

export const routes: Routes = [
    { path: '', redirectTo: '/invoices', pathMatch: 'full' },
    { path: 'invoices', component: InvoicesComponent },
    { path: 'new-invoice', component: NewInvoiceFormComponent },
    { path: 'upload-invoice', component: UploadInvoiceComponent },
    { path: 'contacts', component: ContactListComponent },
    { path: 'new-invoice/:id', component: NewInvoiceFormComponent }
];


---END OF FILE: frontend\src\app\app.routes.ts---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.html---

<div class="space-y-6 sm:space-y-5">
    <div>
      <h3 class="text-lg leading-6 font-medium text-gray-900">{{ title }}</h3>
    </div>
    <div class="space-y-6 sm:space-y-5">
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_name" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Name
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_name" id="{{ identifier }}_name" [(ngModel)]="contact.name" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_line1" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Address Line 1
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_line1" id="{{ identifier }}_line1" [(ngModel)]="contact.line1" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_line2" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Address Line 2
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_line2" id="{{ identifier }}_line2" [(ngModel)]="contact.line2"
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_city" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          City
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_city" id="{{ identifier }}_city" [(ngModel)]="contact.city" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_country" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Country
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_country" id="{{ identifier }}_country" [(ngModel)]="contact.country" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_postcode" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Postcode
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_postcode" id="{{ identifier }}_postcode" [(ngModel)]="contact.postcode" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_phone_number" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Phone Number
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="tel" name="{{ identifier }}_phone_number" id="{{ identifier }}_phone_number" [(ngModel)]="contact.phone_number" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_email" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Email
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="email" name="{{ identifier }}_email" id="{{ identifier }}_email" [(ngModel)]="contact.email" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
    </div>
  </div>

---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.html---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.scss---



---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.scss---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactFormSectionComponent } from './contact-form-section.component';

describe('ContactFormSectionComponent', () => {
  let component: ContactFormSectionComponent;
  let fixture: ComponentFixture<ContactFormSectionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ContactFormSectionComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ContactFormSectionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.spec.ts---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.ts---

import { Component, Input } from '@angular/core';
import { Contact } from '../models/contact.model';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-contact-form-section',
  standalone: true,
  imports: [ FormsModule ],
  templateUrl: './contact-form-section.component.html',
  styleUrl: './contact-form-section.component.scss'
})
export class ContactFormSectionComponent {
  @Input() title: string = '';
  @Input() identifier: string = '';
  @Input() contact: Contact = {
    name: '',
    line1: '',
    line2: '',
    city: '',
    country: '',
    postcode: '',
    phone_number: '',
    email: ''
  };
}

---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.ts---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.html---

<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
    <div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div>
    <div class="relative rounded-xl overflow-auto">
      <div class="shadow-sm overflow-hidden my-8">
        <table class="border-collapse table-auto w-full text-sm">
          <thead>
            <tr>
              <th class="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Name</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Email</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">City</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payee Invoice Count</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pr-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payor Invoice Count</th>
            </tr>
          </thead>
          <tbody class="bg-white dark:bg-slate-800">
            <tr *ngFor="let contact_data of contacts_data | paginate: { itemsPerPage: pageSize, currentPage: currentPage }">
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">{{ contact_data.contact.name }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ contact_data.contact.email }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ contact_data.contact.city }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ contact_data.payee_invoice_count }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 pr-8 text-slate-500 dark:text-slate-400">{{ contact_data.payor_invoice_count }}</td>
            </tr>
          </tbody>
        </table>
        <div class="mt-4">
          <pagination-controls class="" (pageChange)="currentPage = $event"></pagination-controls>
        </div>
      </div>
    </div>
    <div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
  </div>


---END OF FILE: frontend\src\app\contact-list\contact-list.component.html---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.scss---



---END OF FILE: frontend\src\app\contact-list\contact-list.component.scss---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactListComponent } from './contact-list.component';

describe('ContactListComponent', () => {
  let component: ContactListComponent;
  let fixture: ComponentFixture<ContactListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ContactListComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ContactListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\contact-list\contact-list.component.spec.ts---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.ts---

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Contact } from '../models/contact.model';
import { ContactService } from '../services/contact.service';
import { NgxPaginationModule } from 'ngx-pagination';

@Component({
  selector: 'app-contact-list',
  standalone: true,
  imports: [CommonModule, NgxPaginationModule],
  templateUrl: './contact-list.component.html',
  styleUrls: ['./contact-list.component.scss']
})
export class ContactListComponent implements OnInit {
  contacts: Contact[] = [];

  contacts_data: {contact: Contact, payee_invoice_count: number, payor_invoice_count: number}[] = [];

  currentPage = 1;
  pageSize = 10;

  constructor(private contactService: ContactService) { }

  ngOnInit(): void {
    this.getContacts();
  }

  getContacts(): void {
    this.contactService.getContacts()
      .subscribe(contacts_data => this.contacts_data = contacts_data);
  }
}

---END OF FILE: frontend\src\app\contact-list\contact-list.component.ts---



---START OF FILE: frontend\src\app\directives\drag-drop.directive.ts---

import { Directive, Output, Input, EventEmitter, HostBinding, HostListener } from '@angular/core';

@Directive({
  selector: '[appDragDrop]',
  standalone: true
})
export class DragDropDirective {
	
  @Output() onFileDropped = new EventEmitter<any>();
	
  @HostBinding('style.background-color') private background = '#f5fcff'
  @HostBinding('style.opacity') private opacity = '1'
	
  //Dragover listener
  @HostListener('dragover', ['$event']) onDragOver(evt: any) {
    evt.preventDefault();
    evt.stopPropagation();
    this.background = '#9ecbec';
    this.opacity = '0.8'
  }
	
  //Dragleave listener
  @HostListener('dragleave', ['$event']) public onDragLeave(evt: any) {
    evt.preventDefault();
    evt.stopPropagation();
    this.background = '#f5fcff'
    this.opacity = '1'
  }
	
  //Drop listener
  @HostListener('drop', ['$event']) public ondrop(evt: any) {
    evt.preventDefault();
    evt.stopPropagation();
    this.background = '#f5fcff'
    this.opacity = '1'
    let files = evt.dataTransfer.files;
    if (files.length > 0) {
      this.onFileDropped.emit(files)
    }
  }
	
}

---END OF FILE: frontend\src\app\directives\drag-drop.directive.ts---



---START OF FILE: frontend\src\app\footer\footer.component.html---

<footer class="bg-gray-800 text-white py-4 mt-8">
    <div class="container mx-auto text-center">
      <p class="text-sm">&copy; 2023 Invoice Management System. All rights reserved.</p>
    </div>
  </footer>

---END OF FILE: frontend\src\app\footer\footer.component.html---



---START OF FILE: frontend\src\app\footer\footer.component.scss---



---END OF FILE: frontend\src\app\footer\footer.component.scss---



---START OF FILE: frontend\src\app\footer\footer.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [FooterComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\footer\footer.component.spec.ts---



---START OF FILE: frontend\src\app\footer\footer.component.ts---

import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [],
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.scss'
})
export class FooterComponent {

}


---END OF FILE: frontend\src\app\footer\footer.component.ts---



---START OF FILE: frontend\src\app\header\header.component.html---

<header class="bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-4 sticky top-0 z-10">
    <div class="container mx-auto flex justify-between items-center">
      <h1 class="text-2xl font-bold tracking-wider">Invoice Mgmt</h1>
      <app-menu></app-menu>
    </div>
  </header>

---END OF FILE: frontend\src\app\header\header.component.html---



---START OF FILE: frontend\src\app\header\header.component.scss---



---END OF FILE: frontend\src\app\header\header.component.scss---



---START OF FILE: frontend\src\app\header\header.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\header\header.component.spec.ts---



---START OF FILE: frontend\src\app\header\header.component.ts---

import { Component } from '@angular/core';
import { MenuComponent } from '../menu/menu.component';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [MenuComponent],
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent {

}


---END OF FILE: frontend\src\app\header\header.component.ts---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.html---

<div class="space-y-4">
  <div *ngFor="let line of invoiceLines; let i = index" class="flex items-center space-x-4">
    <input type="text" [(ngModel)]="line.description" placeholder="Description" class="flex-grow border border-gray-300 rounded-md px-3 py-2">
    <input type="number" [(ngModel)]="line.count" placeholder="Count" class="w-24 border border-gray-300 rounded-md px-3 py-2">
    <input type="number" [(ngModel)]="line.unit_cost" placeholder="Unit Cost" class="w-32 border border-gray-300 rounded-md px-3 py-2" (ngModelChange)="calculateLineAmount(i)">
    <button type="button" (click)="deleteLine(i); $event.stopPropagation()" class="text-red-500 hover:text-red-700 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  <button type="button" (click)="addLine(); $event.stopPropagation()" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none">
    Add Line
  </button>
</div>

---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.html---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.scss---



---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.scss---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InvoiceLinesComponent } from './invoice-lines.component';

describe('InvoiceLinesComponent', () => {
  let component: InvoiceLinesComponent;
  let fixture: ComponentFixture<InvoiceLinesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [InvoiceLinesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(InvoiceLinesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.spec.ts---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.ts---

import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { InvoiceLine } from '../models/invoice.model';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-invoice-lines',
  templateUrl: './invoice-lines.component.html',
  standalone: true,
  imports: [ FormsModule, CommonModule ],  
})
export class InvoiceLinesComponent {
  @Input() invoiceLines: InvoiceLine[] = [];
  @Output() invoiceLinesChange = new EventEmitter<InvoiceLine[]>();

  addLine() {
    const newLine: InvoiceLine = {
      description: '',
      count: 0,
      unit_cost: 0,
      line_amount: 0
    };

    this.invoiceLines.push(newLine);
    this.invoiceLinesChange.emit(this.invoiceLines);
  }

  deleteLine(index: number) {
    this.invoiceLines.splice(index, 1);
    this.invoiceLinesChange.emit(this.invoiceLines);
  }

  calculateLineAmount(index: number) {
    const line = this.invoiceLines[index];
    line.line_amount = line.count * line.unit_cost;
  }
}

---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.ts---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.html---

<div class="bg-white shadow-md rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-4">Invoices</h2>
    <table class="table-auto w-full">
      <!-- Table content remains the same -->
    </table>
  </div>

---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.html---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.scss---



---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.scss---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InvoiceListComponent } from './invoice-list.component';

describe('InvoiceListComponent', () => {
  let component: InvoiceListComponent;
  let fixture: ComponentFixture<InvoiceListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [InvoiceListComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(InvoiceListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.spec.ts---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.ts---

import { Component } from '@angular/core';

@Component({
  selector: 'app-invoice-list',
  standalone: true,
  imports: [],
  templateUrl: './invoice-list.component.html',
  styleUrl: './invoice-list.component.scss'
})
export class InvoiceListComponent {

}


---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.ts---



---START OF FILE: frontend\src\app\invoices\invoices.component.html---

<app-upload-invoice></app-upload-invoice>

<div id="invoice-table" class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
  <div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div>
  <div class="relative rounded-xl overflow-auto">
    <div class="shadow-sm overflow-hidden my-8">
      <table class="border-collapse table-auto w-full text-sm">
        <thead>
          <tr>
            <th class="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Invoice Number</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payor</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payee</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Invoice Date</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Amount</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pr-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Tax</th>
          </tr>
        </thead>
        <tbody class="bg-white dark:bg-slate-800">
          <tr *ngFor="let invoice of invoices | paginate: { itemsPerPage: pageSize, currentPage: currentPage }" (click)="editInvoice(invoice.id)">
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">{{ invoice.invoice_number }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.payor.name }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.payee.name }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.invoice_date | date }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.amount }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 pr-8 text-slate-500 dark:text-slate-400">{{ invoice.tax }}</td>
          </tr>
        </tbody>
      </table>
      <div class="mt-4">
        <pagination-controls class="" (pageChange)="currentPage = $event"></pagination-controls>
      </div>
    </div>
  </div>
  <div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
</div>

---END OF FILE: frontend\src\app\invoices\invoices.component.html---



---START OF FILE: frontend\src\app\invoices\invoices.component.scss---

#invoice-table {
    margin-top: 1rem;
}

---END OF FILE: frontend\src\app\invoices\invoices.component.scss---



---START OF FILE: frontend\src\app\invoices\invoices.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InvoicesComponent } from './invoices.component';

describe('InvoicesComponent', () => {
  let component: InvoicesComponent;
  let fixture: ComponentFixture<InvoicesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [InvoicesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(InvoicesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\invoices\invoices.component.spec.ts---



---START OF FILE: frontend\src\app\invoices\invoices.component.ts---

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { InvoiceService } from '../services/invoice.service';
import { Invoice } from '../models/invoice.model';
import { NgxPaginationModule } from 'ngx-pagination';
import { Router } from '@angular/router';
import { UploadInvoiceComponent } from '../upload-invoice/upload-invoice.component';

@Component({
  selector: 'app-invoices',
  templateUrl: './invoices.component.html',
  styleUrls: ['./invoices.component.scss'],
  standalone: true,
  imports: [CommonModule, NgxPaginationModule, UploadInvoiceComponent]
})
export class InvoicesComponent implements OnInit {
  invoices: Invoice[] = [];
  currentPage = 1;
  pageSize = 10;  

  constructor(private invoiceService: InvoiceService, private router: Router) { }

  ngOnInit(): void {
    console.log('in invoice list')
    this.getInvoices();
  }

  getInvoices(): void {
    this.invoiceService.getInvoices()
      .subscribe(invoices => this.invoices = invoices);
  }

  editInvoice(invoiceId: number): void {
    this.router.navigate(['/new-invoice', invoiceId]);
  }

}

---END OF FILE: frontend\src\app\invoices\invoices.component.ts---



---START OF FILE: frontend\src\app\menu\menu.component.html---

<nav>
    <ul class="flex space-x-4">
      <li><a routerLink="/invoices" class="text-white hover:text-gray-200 font-semibold transition duration-300">Invoices</a></li>
      <li><a routerLink="/new-invoice" class="text-white hover:text-gray-200 font-semibold transition duration-300">New Invoice</a></li>
      <li><a routerLink="/contacts" class="text-white hover:text-gray-200 font-semibold transition duration-300">Contacts</a></li>
    </ul>
  </nav>

---END OF FILE: frontend\src\app\menu\menu.component.html---



---START OF FILE: frontend\src\app\menu\menu.component.scss---



---END OF FILE: frontend\src\app\menu\menu.component.scss---



---START OF FILE: frontend\src\app\menu\menu.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MenuComponent } from './menu.component';

describe('MenuComponent', () => {
  let component: MenuComponent;
  let fixture: ComponentFixture<MenuComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MenuComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(MenuComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\menu\menu.component.spec.ts---



---START OF FILE: frontend\src\app\menu\menu.component.ts---

import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-menu',
  standalone: true,
  imports: [RouterLink],
  templateUrl: './menu.component.html',
  styleUrl: './menu.component.scss'
})
export class MenuComponent {

}


---END OF FILE: frontend\src\app\menu\menu.component.ts---



---START OF FILE: frontend\src\app\models\contact.model.ts---

  export interface Contact {
    name: string;
    line1: string;
    line2: string;
    city: string;
    country: string;
    postcode: string;
    phone_number: string;
    email: string;
  }
  


---END OF FILE: frontend\src\app\models\contact.model.ts---



---START OF FILE: frontend\src\app\models\invoice.model.ts---

import { Contact } from "./contact.model";

export interface Invoice {
  id: number;
  invoice_number: string;
  invoice_date: Date;
  amount: number;
  tax: number;
  payor: Contact;
  payee: Contact;
  invoice_lines: InvoiceLine[];
  invoice_image: string;  
}

export interface InvoiceLine {
  description: string;
  count: number;
  unit_cost: number;
  line_amount: number;
}

---END OF FILE: frontend\src\app\models\invoice.model.ts---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.html---

<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
    <div class="relative rounded-xl overflow-auto">
      <div class="shadow-sm overflow-hidden my-8">
        <form (ngSubmit)="onSubmit()" class="space-y-8 divide-y divide-gray-200 p-8">
          <div class="space-y-8 divide-y divide-gray-200 sm:space-y-5">
            <div class="space-y-6 sm:space-y-5">
              <div>
                <h3 class="text-lg leading-6 font-medium text-gray-900">Invoice Details</h3>
              </div>
              <div class="space-y-6 sm:space-y-5">
                <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
                  <label for="invoice_number" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                    Invoice Number
                  </label>
                  <div class="mt-1 sm:mt-0 sm:col-span-2">
                    <input type="text" name="invoice_number" id="invoice_number" [(ngModel)]="invoice.invoice_number" required
                           class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
                  </div>
                </div>
                <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
                  <label for="invoice_date" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-4">
                    Invoice Date
                  </label>
                  <div class="mt-1 sm:mt-0 sm:col-span-2">
                    <input type="date" name="invoice_date" id="invoice_date" [(ngModel)]="invoice.invoice_date" required
                           class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
                  </div>
                </div>
                <!-- Add more fields for invoice details -->
              </div>
            </div>
            <div class="md:grid md:grid-cols-2 md:gap-8">
              <div>
                <app-contact-form-section title="Payor Details" identifier="payor" [contact]="invoice.payor"></app-contact-form-section>
              </div>
              <div>
                <app-contact-form-section title="Payee Details" identifier="payee" [contact]="invoice.payee"></app-contact-form-section>
              </div>
            </div>
            <div class="space-y-6 sm:space-y-5">
                <div>
                  <h3 class="text-lg leading-6 font-medium text-gray-900">Invoice Lines</h3>
                </div>
                <div class="space-y-6 sm:space-y-5">
                  <app-invoice-lines [(invoiceLines)]="invoice.invoice_lines"></app-invoice-lines>
                </div>
              </div>
          </div>
          <div class="pt-5" >
            <div class="flex justify-end">

              <button type="button" (click)="getImagePositions()"
                      class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Image Positions
              </button>

              <button type="button" (click)="onCancel()"
                      class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
              </button>
              <button type="submit"
                      class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Save
              </button>
            </div>
          </div>
          <div class="space-y-6 sm:space-y-5">
            <div>
              <h3 class="text-lg leading-6 font-medium text-gray-900">Invoice Image</h3>
            </div>
            <div class="space-y-6 sm:space-y-5">
              <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
                <label for="invoice_image" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                  Invoice Image
                </label>
                <div class="mt-1 sm:mt-0 sm:col-span-2">
                  <img *ngIf="invoiceImage" [src]="invoiceImage" alt="Invoice Image" class="max-w-full">
                </div>
              </div>
            </div>
          </div>

        </form>
      </div>
    </div>
  </div>

---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.html---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.scss---



---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.scss---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NewInvoiceFormComponent } from './new-invoice-form.component';

describe('NewInvoiceFormComponent', () => {
  let component: NewInvoiceFormComponent;
  let fixture: ComponentFixture<NewInvoiceFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [NewInvoiceFormComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(NewInvoiceFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.spec.ts---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.ts---

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { InvoiceService } from '../services/invoice.service';
import { Invoice, InvoiceLine } from '../models/invoice.model';
import { ContactFormSectionComponent } from '../contact-form-section/contact-form-section.component';
import { InvoiceLinesComponent } from '../invoice-lines/invoice-lines.component';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-new-invoice-form',
  templateUrl: './new-invoice-form.component.html',
  styleUrls: ['./new-invoice-form.component.scss'],
  standalone: true,
  imports: [ ContactFormSectionComponent, InvoiceLinesComponent, FormsModule, CommonModule ]
})

export class NewInvoiceFormComponent implements OnInit {
  invoiceId: number | null = null;
  invoiceImage: string | null = null;
  invoice: Invoice = {
    id: -1,    
    invoice_number: '',
    invoice_date: new Date(),
    amount: 0,
    tax: 0,
    invoice_image: '',
    payor: {
      name: '',
      line1: '',
      line2: '',
      city: '',
      country: '',
      postcode: '',
      phone_number: '',
      email: ''
    },
    payee: {
      name: '',
      line1: '',
      line2: '',
      city: '',
      country: '',
      postcode: '',
      phone_number: '',
      email: ''
    },
    invoice_lines: []
  };

  constructor(private invoiceService: InvoiceService, private route: ActivatedRoute, private router: Router) { }

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      this.invoiceId = Number(params.get('id'));
      if (this.invoiceId) {
        this.loadInvoice();
        this.getInvoiceImage();        
      }
    });
  }

  getInvoiceImage(): void {
    if (this.invoiceId) {
      this.invoiceService.getInvoiceImage(this.invoiceId).subscribe(
        (response: Blob) => {
          console.log('Response:', response);          
          const reader = new FileReader();
          reader.onloadend = () => {
            const base64data = reader.result as string;
            console.log('Base64-encoded image data:', base64data);
            this.invoiceImage = base64data;
          };
          reader.onerror = (error) => {
            console.error('Error reading image data:', error);
          };
          reader.readAsDataURL(response);
        },
        (error) => {
          console.error('Error retrieving invoice image:', error);
        }
      );
    }
  }

  loadInvoice(): void {
    if (this.invoiceId) {
      this.invoiceService.getInvoice(this.invoiceId).subscribe(invoice => {
        this.invoice = invoice;
      });
    }
  }  

  onSubmit(): void {
    if (this.invoice.id === -1) {
      this.invoiceService.createInvoice(this.invoice).subscribe(
        response => {
          console.log('Invoice created successfully:', response);
          this.router.navigate(['/invoices']);
        },
        error => {
          console.error('Error creating invoice:', error);
        }        
      );
    } else {     
      this.invoiceService.updateInvoice(this.invoice).subscribe(
        response => {
          console.log('Invoice created successfully:', response);
          this.router.navigate(['/invoices']);
        },
        error => {
          console.error('Error updating invoice:', error);
        }        
      );
    }
  }

  addNewLine(newLine: InvoiceLine) {
    this.invoice.invoice_lines.push(newLine);
  }  

  onCancel(): void {
    this.router.navigate(['/invoices']);
  }

  getImagePositions(): void {
    
  }
}

---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.ts---



---START OF FILE: frontend\src\app\services\contact.service.ts---

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Contact } from '../models/contact.model';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ContactService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) { }

  getContacts(): Observable<{contact: Contact, payee_invoice_count: number, payor_invoice_count: number}[]> {
    return this.http.get<{contact: Contact, payee_invoice_count: number, payor_invoice_count: number}[]>(`${this.apiUrl}/contacts`);
  }
}

---END OF FILE: frontend\src\app\services\contact.service.ts---



---START OF FILE: frontend\src\app\services\invoice.service.ts---

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Invoice } from '../models/invoice.model';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class InvoiceService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) { }

  getInvoices(): Observable<Invoice[]> {
    return this.http.get<Invoice[]>(`${this.apiUrl}/invoices`);
  }

  getInvoice(invoiceId: number): Observable<Invoice> {
    return this.http.get<Invoice>(`${this.apiUrl}/invoices/${invoiceId}`);
  }
  
  updateInvoice(invoice: Invoice): Observable<Invoice> {
    return this.http.post<Invoice>(`${this.apiUrl}/invoices`, invoice);
  }  

  createInvoice(invoice: Invoice): Observable<Invoice> {
    return this.http.post<Invoice>(`${this.apiUrl}/invoices`, invoice);
  }

  getInvoiceImage(invoiceId: number): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/invoices/${invoiceId}/image`, { responseType: 'blob' });
  }

}

---END OF FILE: frontend\src\app\services\invoice.service.ts---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.html---

<div class="container mx-auto">
  <h2 class="text-2xl font-bold mb-4">Upload Invoice</h2>
  <form (ngSubmit)="onSubmit()" class="space-y-4" appDragDrop (onFileDropped)="onFileSelected($event)">
    <label for="file-upload" class="label relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600">
      <div class="col-span-full">
        <div id="upload-box"
          class="mt-1 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-3 py-5">

          <span>Upload a file</span>
          <input id="file-upload" name="file-upload" type="file" (change)="onFileSelected($event)"
            accept=".jpg, .jpeg, .pdf, .png" class="sr-only">
          <p>{{selectedFile?.name}}</p>

          <button *ngIf="true || selectedFile" type="button" (click)="onSubmit()"
            class="bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2">
            Upload
          </button>

          <p *ngIf="aiComment!=null">{{aiComment}}</p>

        </div>
      </div>
    </label>

  </form>
</div>

---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.html---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.scss---

label {
    width: 100%;
    height: 100%;
}

#upload-box {
    display: flex;
    flex-direction: column;
    text-align: center;
    height: 10rem;

    button {
        max-width: 8rem;
        padding: 4px;
        margin-left: auto;
        margin-right: auto;
        width: 90%;
        margin-top: 1rem;

    }
}

---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.scss---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UploadInvoiceComponent } from './upload-invoice.component';

describe('UploadInvoiceComponent', () => {
  let component: UploadInvoiceComponent;
  let fixture: ComponentFixture<UploadInvoiceComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UploadInvoiceComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(UploadInvoiceComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.spec.ts---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.ts---

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { DragDropDirective } from '../directives/drag-drop.directive';
import { CommonModule } from '@angular/common';
import { environment } from '../../environments/environment';

@Component({
  selector: 'app-upload-invoice',
  templateUrl: './upload-invoice.component.html',
  styleUrls: ['./upload-invoice.component.scss'],
  imports: [ DragDropDirective, CommonModule ],
  standalone: true
})
export class UploadInvoiceComponent {
  selectedFile: File | null = null;
  aiComment: string = '';

  constructor(private http: HttpClient, private router: Router) { }

  onFileSelected(event: any) {
    console.log(event)
    this.aiComment = '';
    this.selectedFile = (event.target)?event.target.files[0]:event[0];
  }

  onSubmit() {
    if (this.selectedFile) {
      const formData = new FormData();
      formData.append('file', this.selectedFile, this.selectedFile.name);

      this.http.post(`${environment.apiUrl}/upload`, formData).subscribe(
        (res: any) => {
          console.log('File uploaded successfully',res);
          this.selectedFile = null;
          this.aiComment = res.ai_comments;
          // this.router.navigate(['/new-invoice', res.id]);
        },
        (error) => {
          console.error('Error uploading file:', error);
          // Handle error response
        }
      );
    }
  }
}

---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.ts---



---START OF FILE: frontend\src\environments\environment.prod.ts---

export const environment = {
    production: true,
    apiUrl: 'https://invoice-reader-api-a57dd226fa75.herokuapp.com/'
  };

---END OF FILE: frontend\src\environments\environment.prod.ts---



---START OF FILE: frontend\src\environments\environment.ts---

export const environment = {
    production: false,
    apiUrl: 'http://localhost:8000'
    // apiUrl: 'https://invoice-reader-api-a57dd226fa75.herokuapp.com/'
  };

---END OF FILE: frontend\src\environments\environment.ts---

