

---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.html---

<div class="space-y-6 sm:space-y-5">
    <div>
      <h3 class="text-lg leading-6 font-medium text-gray-900">{{ title }}</h3>
    </div>
    <div class="space-y-6 sm:space-y-5">
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_name" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Name
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_name" id="{{ identifier }}_name" [(ngModel)]="contact.name" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_address_line1" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Address Line 1
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_address_line1" id="{{ identifier }}_address_line1" [(ngModel)]="contact.address_line1" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_address_line2" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Address Line 2
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_address_line2" id="{{ identifier }}_address_line2" [(ngModel)]="contact.address_line2"
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_address_city" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          City
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_address_city" id="{{ identifier }}_address_city" [(ngModel)]="contact.address_city" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_address_country" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Country
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_address_country" id="{{ identifier }}_address_country" [(ngModel)]="contact.address_country" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_address_postcode" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Postcode
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="text" name="{{ identifier }}_address_postcode" id="{{ identifier }}_address_postcode" [(ngModel)]="contact.address_postcode" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_phone_number" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Phone Number
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="tel" name="{{ identifier }}_phone_number" id="{{ identifier }}_phone_number" [(ngModel)]="contact.phone_number" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
      <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
        <label for="{{ identifier }}_email" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
          Email
        </label>
        <div class="mt-1 sm:mt-0 sm:col-span-2">
          <input type="email" name="{{ identifier }}_email" id="{{ identifier }}_email" [(ngModel)]="contact.email" required
                 class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
        </div>
      </div>
    </div>
  </div>

---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.html---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.scss---



---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.scss---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactFormSectionComponent } from './contact-form-section.component';

describe('ContactFormSectionComponent', () => {
  let component: ContactFormSectionComponent;
  let fixture: ComponentFixture<ContactFormSectionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ContactFormSectionComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ContactFormSectionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.spec.ts---



---START OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.ts---

import { Component, Input } from '@angular/core';
import { Contact } from '../models/contact.model';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-contact-form-section',
  standalone: true,
  imports: [ FormsModule ],
  templateUrl: './contact-form-section.component.html',
  styleUrl: './contact-form-section.component.scss'
})
export class ContactFormSectionComponent {
  @Input() title: string = '';
  @Input() identifier: string = '';
  @Input() contact: Contact = {
    name: '',
    address_line1: '',
    address_line2: '',
    address_city: '',
    address_country: '',
    address_postcode: '',
    phone_number: '',
    email: ''
  };
}

---END OF FILE: frontend\src\app\contact-form-section\contact-form-section.component.ts---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.html---

<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
    <div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div>
    <div class="relative rounded-xl overflow-auto">
      <div class="shadow-sm overflow-hidden my-8">
        <table class="border-collapse table-auto w-full text-sm">
          <thead>
            <tr>
              <th class="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Name</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Email</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">City</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payee Invoice Count</th>
              <th class="border-b dark:border-slate-600 font-medium p-4 pr-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payor Invoice Count</th>
            </tr>
          </thead>
          <tbody class="bg-white dark:bg-slate-800">
            <tr *ngFor="let contact_data of contacts_data | paginate: { itemsPerPage: pageSize, currentPage: currentPage }">
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">{{ contact_data.contact.name }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ contact_data.contact.email }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ contact_data.contact.address_city }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ contact_data.payee_invoice_count }}</td>
              <td class="border-b border-slate-100 dark:border-slate-700 p-4 pr-8 text-slate-500 dark:text-slate-400">{{ contact_data.payor_invoice_count }}</td>
            </tr>
          </tbody>
        </table>
        <div class="mt-4">
          <pagination-controls class="" (pageChange)="currentPage = $event"></pagination-controls>
        </div>
      </div>
    </div>
    <div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
  </div>


---END OF FILE: frontend\src\app\contact-list\contact-list.component.html---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.scss---



---END OF FILE: frontend\src\app\contact-list\contact-list.component.scss---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactListComponent } from './contact-list.component';

describe('ContactListComponent', () => {
  let component: ContactListComponent;
  let fixture: ComponentFixture<ContactListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ContactListComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(ContactListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\contact-list\contact-list.component.spec.ts---



---START OF FILE: frontend\src\app\contact-list\contact-list.component.ts---

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Contact } from '../models/contact.model';
import { ContactService } from '../services/contact.service';
import { NgxPaginationModule } from 'ngx-pagination';

@Component({
  selector: 'app-contact-list',
  standalone: true,
  imports: [CommonModule, NgxPaginationModule],
  templateUrl: './contact-list.component.html',
  styleUrls: ['./contact-list.component.scss']
})
export class ContactListComponent implements OnInit {
  contacts: Contact[] = [];

  contacts_data: {contact: Contact, payee_invoice_count: number, payor_invoice_count: number}[] = [];

  currentPage = 1;
  pageSize = 10;

  constructor(private contactService: ContactService) { }

  ngOnInit(): void {
    this.getContacts();
  }

  getContacts(): void {
    this.contactService.getContacts()
      .subscribe(contacts_data => this.contacts_data = contacts_data);
  }
}

---END OF FILE: frontend\src\app\contact-list\contact-list.component.ts---



---START OF FILE: frontend\src\app\directives\drag-drop.directive.ts---

import { Directive, Output, Input, EventEmitter, HostBinding, HostListener } from '@angular/core';

@Directive({
  selector: '[appDragDrop]',
  standalone: true
})
export class DragDropDirective {
	
  @Output() onFileDropped = new EventEmitter<any>();
	
  @HostBinding('style.background-color') private background = '#f5fcff'
  @HostBinding('style.opacity') private opacity = '1'
	
  //Dragover listener
  @HostListener('dragover', ['$event']) onDragOver(evt: any) {
    evt.preventDefault();
    evt.stopPropagation();
    this.background = '#9ecbec';
    this.opacity = '0.8'
  }
	
  //Dragleave listener
  @HostListener('dragleave', ['$event']) public onDragLeave(evt: any) {
    evt.preventDefault();
    evt.stopPropagation();
    this.background = '#f5fcff'
    this.opacity = '1'
  }
	
  //Drop listener
  @HostListener('drop', ['$event']) public ondrop(evt: any) {
    evt.preventDefault();
    evt.stopPropagation();
    this.background = '#f5fcff'
    this.opacity = '1'
    let files = evt.dataTransfer.files;
    if (files.length > 0) {
      this.onFileDropped.emit(files)
    }
  }
	
}

---END OF FILE: frontend\src\app\directives\drag-drop.directive.ts---



---START OF FILE: frontend\src\app\footer\footer.component.html---

<footer class="bg-gray-800 text-white py-4 mt-8">
    <div class="container mx-auto text-center">
      <p class="text-sm">&copy; 2023 Invoice Management System. All rights reserved.</p>
    </div>
  </footer>

---END OF FILE: frontend\src\app\footer\footer.component.html---



---START OF FILE: frontend\src\app\footer\footer.component.scss---



---END OF FILE: frontend\src\app\footer\footer.component.scss---



---START OF FILE: frontend\src\app\footer\footer.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [FooterComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\footer\footer.component.spec.ts---



---START OF FILE: frontend\src\app\footer\footer.component.ts---

import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [],
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.scss'
})
export class FooterComponent {

}


---END OF FILE: frontend\src\app\footer\footer.component.ts---



---START OF FILE: frontend\src\app\header\header.component.html---

<header class="bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-4 sticky top-0 z-10">
    <div class="container mx-auto flex justify-between items-center">
      <h1 class="text-2xl font-bold tracking-wider">Invoice Mgmt</h1>
      <app-menu></app-menu>
    </div>
  </header>

---END OF FILE: frontend\src\app\header\header.component.html---



---START OF FILE: frontend\src\app\header\header.component.scss---



---END OF FILE: frontend\src\app\header\header.component.scss---



---START OF FILE: frontend\src\app\header\header.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\header\header.component.spec.ts---



---START OF FILE: frontend\src\app\header\header.component.ts---

import { Component } from '@angular/core';
import { MenuComponent } from '../menu/menu.component';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [MenuComponent],
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent {

}


---END OF FILE: frontend\src\app\header\header.component.ts---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.html---

<div class="space-y-4">
  <div *ngFor="let line of invoiceLines; let i = index" class="flex items-center space-x-4">
    <input type="text" [(ngModel)]="line.description" placeholder="Description" class="flex-grow border border-gray-300 rounded-md px-3 py-2">
    <input type="number" [(ngModel)]="line.count" placeholder="Count" class="w-24 border border-gray-300 rounded-md px-3 py-2">
    <input type="number" [(ngModel)]="line.unit_cost" placeholder="Unit Cost" class="w-32 border border-gray-300 rounded-md px-3 py-2" (ngModelChange)="calculateLineAmount(i)">
    <button type="button" (click)="deleteLine(i); $event.stopPropagation()" class="text-red-500 hover:text-red-700 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  <button type="button" (click)="addLine(); $event.stopPropagation()" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none">
    Add Line
  </button>
</div>

---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.html---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.scss---



---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.scss---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InvoiceLinesComponent } from './invoice-lines.component';

describe('InvoiceLinesComponent', () => {
  let component: InvoiceLinesComponent;
  let fixture: ComponentFixture<InvoiceLinesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [InvoiceLinesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(InvoiceLinesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.spec.ts---



---START OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.ts---

import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { InvoiceLine } from '../models/invoice.model';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-invoice-lines',
  templateUrl: './invoice-lines.component.html',
  standalone: true,
  imports: [ FormsModule, CommonModule ],  
})
export class InvoiceLinesComponent {
  @Input() invoiceLines: InvoiceLine[] = [];
  @Output() invoiceLinesChange = new EventEmitter<InvoiceLine[]>();

  addLine() {
    const newLine: InvoiceLine = {
      description: '',
      count: 0,
      unit_cost: 0,
      line_amount: 0
    };

    this.invoiceLines.push(newLine);
    this.invoiceLinesChange.emit(this.invoiceLines);
  }

  deleteLine(index: number) {
    this.invoiceLines.splice(index, 1);
    this.invoiceLinesChange.emit(this.invoiceLines);
  }

  calculateLineAmount(index: number) {
    const line = this.invoiceLines[index];
    line.line_amount = line.count * line.unit_cost;
  }
}

---END OF FILE: frontend\src\app\invoice-lines\invoice-lines.component.ts---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.html---

<div class="bg-white shadow-md rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-4">Invoices</h2>
    <table class="table-auto w-full">
      <!-- Table content remains the same -->
    </table>
  </div>

---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.html---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.scss---



---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.scss---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InvoiceListComponent } from './invoice-list.component';

describe('InvoiceListComponent', () => {
  let component: InvoiceListComponent;
  let fixture: ComponentFixture<InvoiceListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [InvoiceListComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(InvoiceListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.spec.ts---



---START OF FILE: frontend\src\app\invoice-list\invoice-list.component.ts---

import { Component } from '@angular/core';

@Component({
  selector: 'app-invoice-list',
  standalone: true,
  imports: [],
  templateUrl: './invoice-list.component.html',
  styleUrl: './invoice-list.component.scss'
})
export class InvoiceListComponent {

}


---END OF FILE: frontend\src\app\invoice-list\invoice-list.component.ts---



---START OF FILE: frontend\src\app\invoices\invoices.component.html---

<app-upload-invoice></app-upload-invoice>

<div id="invoice-table" class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
  <div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div>
  <div class="relative rounded-xl overflow-auto">
    <div class="shadow-sm overflow-hidden my-8">
      <table class="border-collapse table-auto w-full text-sm">
        <thead>
          <tr>
            <th class="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Invoice Number</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payor</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Payee</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Invoice Date</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Amount</th>
            <th class="border-b dark:border-slate-600 font-medium p-4 pr-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Tax</th>
          </tr>
        </thead>
        <tbody class="bg-white dark:bg-slate-800">
          <tr *ngFor="let invoice of invoices | paginate: { itemsPerPage: pageSize, currentPage: currentPage }" (click)="editInvoice(invoice.id)">
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">{{ invoice.invoice_number }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.payor.name }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.payee.name }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.invoice_date | date }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">{{ invoice.amount }}</td>
            <td class="border-b border-slate-100 dark:border-slate-700 p-4 pr-8 text-slate-500 dark:text-slate-400">{{ invoice.tax }}</td>
          </tr>
        </tbody>
      </table>
      <div class="mt-4">
        <pagination-controls class="" (pageChange)="currentPage = $event"></pagination-controls>
      </div>
    </div>
  </div>
  <div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
</div>

---END OF FILE: frontend\src\app\invoices\invoices.component.html---



---START OF FILE: frontend\src\app\invoices\invoices.component.scss---

#invoice-table {
    margin-top: 1rem;
}

---END OF FILE: frontend\src\app\invoices\invoices.component.scss---



---START OF FILE: frontend\src\app\invoices\invoices.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { InvoicesComponent } from './invoices.component';

describe('InvoicesComponent', () => {
  let component: InvoicesComponent;
  let fixture: ComponentFixture<InvoicesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [InvoicesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(InvoicesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\invoices\invoices.component.spec.ts---



---START OF FILE: frontend\src\app\invoices\invoices.component.ts---

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { InvoiceService } from '../services/invoice.service';
import { Invoice } from '../models/invoice.model';
import { NgxPaginationModule } from 'ngx-pagination';
import { Router } from '@angular/router';
import { UploadInvoiceComponent } from '../upload-invoice/upload-invoice.component';

@Component({
  selector: 'app-invoices',
  templateUrl: './invoices.component.html',
  styleUrls: ['./invoices.component.scss'],
  standalone: true,
  imports: [CommonModule, NgxPaginationModule, UploadInvoiceComponent]
})
export class InvoicesComponent implements OnInit {
  invoices: Invoice[] = [];
  currentPage = 1;
  pageSize = 10;  

  constructor(private invoiceService: InvoiceService, private router: Router) { }

  ngOnInit(): void {
    console.log('in invoice list')
    this.getInvoices();
  }

  getInvoices(): void {
    this.invoiceService.getInvoices()
      .subscribe(invoices => this.invoices = invoices);
  }

  editInvoice(invoiceId: number): void {
    this.router.navigate(['/new-invoice', invoiceId]);
  }

}

---END OF FILE: frontend\src\app\invoices\invoices.component.ts---



---START OF FILE: frontend\src\app\menu\menu.component.html---

<nav>
    <ul class="flex space-x-4">
      <li><a routerLink="/invoices" class="text-white hover:text-gray-200 font-semibold transition duration-300">Invoices</a></li>
      <li><a routerLink="/new-invoice" class="text-white hover:text-gray-200 font-semibold transition duration-300">New Invoice</a></li>
      <li><a routerLink="/contacts" class="text-white hover:text-gray-200 font-semibold transition duration-300">Contacts</a></li>
    </ul>
  </nav>

---END OF FILE: frontend\src\app\menu\menu.component.html---



---START OF FILE: frontend\src\app\menu\menu.component.scss---



---END OF FILE: frontend\src\app\menu\menu.component.scss---



---START OF FILE: frontend\src\app\menu\menu.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MenuComponent } from './menu.component';

describe('MenuComponent', () => {
  let component: MenuComponent;
  let fixture: ComponentFixture<MenuComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MenuComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(MenuComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\menu\menu.component.spec.ts---



---START OF FILE: frontend\src\app\menu\menu.component.ts---

import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-menu',
  standalone: true,
  imports: [RouterLink],
  templateUrl: './menu.component.html',
  styleUrl: './menu.component.scss'
})
export class MenuComponent {

}


---END OF FILE: frontend\src\app\menu\menu.component.ts---



---START OF FILE: frontend\src\app\models\contact.model.ts---

  export interface Contact {
    name: string;
    address_line1: string;
    address_line2: string;
    address_city: string;
    address_country: string;
    address_postcode: string;
    phone_number: string;
    email: string;
  }
  


---END OF FILE: frontend\src\app\models\contact.model.ts---



---START OF FILE: frontend\src\app\models\invoice.model.ts---

import { Contact } from "./contact.model";

export interface Invoice {
  id: number;
  invoice_number: string;
  invoice_date: Date;
  amount: number;
  tax: number;
  payor: Contact;
  payee: Contact;
  invoice_lines: InvoiceLine[];
  invoice_image: string;  
}

export interface InvoiceLine {
  description: string;
  count: number;
  unit_cost: number;
  line_amount: number;
}

---END OF FILE: frontend\src\app\models\invoice.model.ts---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.html---

<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
    <div class="relative rounded-xl overflow-auto">
      <div class="shadow-sm overflow-hidden my-8">
        <form (ngSubmit)="onSubmit()" class="space-y-8 divide-y divide-gray-200 p-8">
          <div class="space-y-8 divide-y divide-gray-200 sm:space-y-5">
            <div class="space-y-6 sm:space-y-5">
              <div>
                <h3 class="text-lg leading-6 font-medium text-gray-900">Invoice Details</h3>
              </div>
              <div class="space-y-6 sm:space-y-5">
                <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
                  <label for="invoice_number" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                    Invoice Number
                  </label>
                  <div class="mt-1 sm:mt-0 sm:col-span-2">
                    <input type="text" name="invoice_number" id="invoice_number" [(ngModel)]="invoice.invoice_number" required
                           class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
                  </div>
                </div>
                <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
                  <label for="invoice_date" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-4">
                    Invoice Date
                  </label>
                  <div class="mt-1 sm:mt-0 sm:col-span-2">
                    <input type="date" name="invoice_date" id="invoice_date" [(ngModel)]="invoice.invoice_date" required
                           class="block max-w-lg w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md">
                  </div>
                </div>
                <!-- Add more fields for invoice details -->
              </div>
            </div>
            <div class="md:grid md:grid-cols-2 md:gap-8">
              <div>
                <app-contact-form-section title="Payor Details" identifier="payor" [contact]="invoice.payor"></app-contact-form-section>
              </div>
              <div>
                <app-contact-form-section title="Payee Details" identifier="payee" [contact]="invoice.payee"></app-contact-form-section>
              </div>
            </div>
            <div class="space-y-6 sm:space-y-5">
                <div>
                  <h3 class="text-lg leading-6 font-medium text-gray-900">Invoice Lines</h3>
                </div>
                <div class="space-y-6 sm:space-y-5">
                  <app-invoice-lines [(invoiceLines)]="invoice.invoice_lines"></app-invoice-lines>
                </div>
              </div>
          </div>
          <div class="pt-5" >
            <div class="flex justify-end">

              <button type="button" (click)="getImagePositions()"
                      class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Image Positions
              </button>

              <button type="button" (click)="onCancel()"
                      class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
              </button>
              <button type="submit"
                      class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Save
              </button>
            </div>
          </div>
          <div class="space-y-6 sm:space-y-5">
            <div>
              <h3 class="text-lg leading-6 font-medium text-gray-900">Invoice Image</h3>
            </div>
            <div class="space-y-6 sm:space-y-5">
              <div class="sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:pt-5">
                <label for="invoice_image" class="block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2">
                  Invoice Image
                </label>
                <div class="mt-1 sm:mt-0 sm:col-span-2">
                  <img *ngIf="invoiceImage" [src]="invoiceImage" alt="Invoice Image" class="max-w-full">
                </div>
              </div>
            </div>
          </div>

        </form>
      </div>
    </div>
  </div>

---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.html---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.scss---



---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.scss---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NewInvoiceFormComponent } from './new-invoice-form.component';

describe('NewInvoiceFormComponent', () => {
  let component: NewInvoiceFormComponent;
  let fixture: ComponentFixture<NewInvoiceFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [NewInvoiceFormComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(NewInvoiceFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.spec.ts---



---START OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.ts---

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { InvoiceService } from '../services/invoice.service';
import { Invoice, InvoiceLine } from '../models/invoice.model';
import { ContactFormSectionComponent } from '../contact-form-section/contact-form-section.component';
import { InvoiceLinesComponent } from '../invoice-lines/invoice-lines.component';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-new-invoice-form',
  templateUrl: './new-invoice-form.component.html',
  styleUrls: ['./new-invoice-form.component.scss'],
  standalone: true,
  imports: [ ContactFormSectionComponent, InvoiceLinesComponent, FormsModule, CommonModule ]
})

export class NewInvoiceFormComponent implements OnInit {
  invoiceId: number | null = null;
  invoiceImage: string | null = null;
  invoice: Invoice = {
    id: -1,    
    invoice_number: '',
    invoice_date: new Date(),
    amount: 0,
    tax: 0,
    invoice_image: '',
    payor: {
      name: '',
      address_line1: '',
      address_line2: '',
      address_city  : '',
      address_country: '',
      address_postcode: '',
      phone_number: '',
      email: ''
    },
    payee: {
      name: '',
      address_line1: '',
      address_line2: '',
      address_city: '',
      address_country: '',
      address_postcode: '',
      phone_number: '',
      email: ''
    },
    invoice_lines: []
  };

  constructor(private invoiceService: InvoiceService, private route: ActivatedRoute, private router: Router) { }

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      this.invoiceId = Number(params.get('id'));
      if (this.invoiceId) {
        this.loadInvoice();
        this.getInvoiceImage();        
      }
    });
  }

  getInvoiceImage(): void {
    if (this.invoiceId) {
      this.invoiceService.getInvoiceImage(this.invoiceId).subscribe(
        (response: Blob) => {
          console.log('Response:', response);          
          const reader = new FileReader();
          reader.onloadend = () => {
            const base64data = reader.result as string;
            console.log('Base64-encoded image data:', base64data);
            this.invoiceImage = base64data;
          };
          reader.onerror = (error) => {
            console.error('Error reading image data:', error);
          };
          reader.readAsDataURL(response);
        },
        (error) => {
          console.error('Error retrieving invoice image:', error);
        }
      );
    }
  }

  loadInvoice(): void {
    if (this.invoiceId) {
      this.invoiceService.getInvoice(this.invoiceId).subscribe(invoice => {
        this.invoice = invoice;
      });
    }
  }  

  onSubmit(): void {
    if (this.invoice.id === -1) {
      this.invoiceService.createInvoice(this.invoice).subscribe(
        response => {
          console.log('Invoice created successfully:', response);
          this.router.navigate(['/invoices']);
        },
        error => {
          console.error('Error creating invoice:', error);
        }        
      );
    } else {     
      this.invoiceService.updateInvoice(this.invoice).subscribe(
        response => {
          console.log('Invoice created successfully:', response);
          this.router.navigate(['/invoices']);
        },
        error => {
          console.error('Error updating invoice:', error);
        }        
      );
    }
  }

  addNewLine(newLine: InvoiceLine) {
    this.invoice.invoice_lines.push(newLine);
  }  

  onCancel(): void {
    this.router.navigate(['/invoices']);
  }

  getImagePositions(): void {
    
  }
}

---END OF FILE: frontend\src\app\new-invoice-form\new-invoice-form.component.ts---



---START OF FILE: frontend\src\app\services\contact.service.ts---

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Contact } from '../models/contact.model';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ContactService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) { }

  getContacts(): Observable<{contact: Contact, payee_invoice_count: number, payor_invoice_count: number}[]> {
    return this.http.get<{contact: Contact, payee_invoice_count: number, payor_invoice_count: number}[]>(`${this.apiUrl}/contacts`);
  }
}

---END OF FILE: frontend\src\app\services\contact.service.ts---



---START OF FILE: frontend\src\app\services\invoice.service.ts---

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Invoice } from '../models/invoice.model';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class InvoiceService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) { }

  getInvoices(): Observable<Invoice[]> {
    return this.http.get<Invoice[]>(`${this.apiUrl}/invoices`);
  }

  getInvoice(invoiceId: number): Observable<Invoice> {
    return this.http.get<Invoice>(`${this.apiUrl}/invoices/${invoiceId}`);
  }
  
  updateInvoice(invoice: Invoice): Observable<Invoice> {
    return this.http.post<Invoice>(`${this.apiUrl}/invoices`, invoice);
  }  

  createInvoice(invoice: Invoice): Observable<Invoice> {
    return this.http.post<Invoice>(`${this.apiUrl}/invoices`, invoice);
  }

  getInvoiceImage(invoiceId: number): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/invoices/${invoiceId}/image`, { responseType: 'blob' });
  }

}

---END OF FILE: frontend\src\app\services\invoice.service.ts---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.html---

<div class="container mx-auto">
  <h2 class="text-2xl font-bold mb-4">Upload Invoice</h2>
  <form (ngSubmit)="onSubmit()" class="space-y-4" appDragDrop (onFileDropped)="onFileSelected($event)">
    <label for="file-upload" class="label relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600">
      <div class="col-span-full">
        <div id="upload-box"
          class="mt-1 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-3 py-5">

          <span>Upload a file</span>
          <input id="file-upload" name="file-upload" type="file" (change)="onFileSelected($event)"
            accept=".jpg, .jpeg, .pdf, .png" class="sr-only">
          <p>{{selectedFile?.name}}</p>

          <button *ngIf="true || selectedFile" type="button" (click)="onSubmit()"
            class="bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2">
            Upload
          </button>

          <p *ngIf="aiComment!=null">{{aiComment}}</p>

        </div>
      </div>
    </label>

  </form>
</div>

---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.html---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.scss---

label {
    width: 100%;
    height: 100%;
}

#upload-box {
    display: flex;
    flex-direction: column;
    text-align: center;
    height: 10rem;

    button {
        max-width: 8rem;
        padding: 4px;
        margin-left: auto;
        margin-right: auto;
        width: 90%;
        margin-top: 1rem;

    }
}

---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.scss---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.spec.ts---

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UploadInvoiceComponent } from './upload-invoice.component';

describe('UploadInvoiceComponent', () => {
  let component: UploadInvoiceComponent;
  let fixture: ComponentFixture<UploadInvoiceComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UploadInvoiceComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(UploadInvoiceComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.spec.ts---



---START OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.ts---

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { DragDropDirective } from '../directives/drag-drop.directive';
import { CommonModule } from '@angular/common';
import { environment } from '../../environments/environment';

@Component({
  selector: 'app-upload-invoice',
  templateUrl: './upload-invoice.component.html',
  styleUrls: ['./upload-invoice.component.scss'],
  imports: [ DragDropDirective, CommonModule ],
  standalone: true
})
export class UploadInvoiceComponent {
  selectedFile: File | null = null;
  aiComment: string = '';

  constructor(private http: HttpClient, private router: Router) { }

  onFileSelected(event: any) {
    console.log(event)
    this.aiComment = '';
    this.selectedFile = (event.target)?event.target.files[0]:event[0];
  }

  onSubmit() {
    if (this.selectedFile) {
      const formData = new FormData();
      formData.append('file', this.selectedFile, this.selectedFile.name);

      this.http.post(`${environment.apiUrl}/upload`, formData).subscribe(
        (res: any) => {
          console.log('File uploaded successfully',res);
          this.selectedFile = null;
          this.aiComment = res.ai_comments;
          // this.router.navigate(['/new-invoice', res.id]);
        },
        (error) => {
          console.error('Error uploading file:', error);
          // Handle error response
        }
      );
    }
  }
}

---END OF FILE: frontend\src\app\upload-invoice\upload-invoice.component.ts---



---START OF FILE: frontend\src\environments\environment.prod.ts---

export const environment = {
    production: true,
    apiUrl: 'https://angular-ai-invoice-reader-obqwzdwee-clem-whites-projects.vercel.app/'
  };

---END OF FILE: frontend\src\environments\environment.prod.ts---



---START OF FILE: frontend\src\environments\environment.ts---

export const environment = {
    production: false,
    apiUrl: 'http://localhost:8000'
    // apiUrl: 'https://invoice-reader-api-a57dd226fa75.herokuapp.com/'
  };

---END OF FILE: frontend\src\environments\environment.ts---

